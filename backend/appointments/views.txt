from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.generics import ListAPIView
from rest_framework.decorators import api_view
from django.views.decorators.csrf import csrf_exempt
import json

from .models import Appointment
from .serializers import AppointmentSerializer
from .services import create_appointment, update_appointment, delete_appointment, _to_datetime


class AppointmentCreateView(APIView):
    def post(self, request, *args, **kwargs):
        try:
            appointment = create_appointment(request.data)
            serializer = AppointmentSerializer(appointment)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class AppointmentUpdateView(APIView):
    def put(self, request, appointment_id):
        try:
            data = update_appointment(appointment_id, request.data)
            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class AppointmentDeleteView(APIView):
    def delete(self, request, appointment_id):
        try:
            result = delete_appointment(appointment_id)
            return Response(result, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class AppointmentListView(ListAPIView):
    queryset = Appointment.objects.all().order_by('-start_time')
    serializer_class = AppointmentSerializer


@csrf_exempt
@api_view(['POST'])
def ghl_webhook(request):
    """Recibe los webhooks de GHL y sincroniza la BD local."""
    event = request.data or {}
    print("=== Webhook recibido de GHL ===")
    print(json.dumps(event, indent=2, ensure_ascii=False))

    appointment_data = event.get("appointment") if "appointment" in event else event
    event_type = event.get("type") or request.headers.get("X-GHL-Event")
    ghl_id = appointment_data.get("id") if isinstance(appointment_data, dict) else None

    if not isinstance(appointment_data, dict) or not ghl_id:
        return Response({"error": "Payload inv√°lido"}, status=status.HTTP_400_BAD_REQUEST)

    try:
        if event_type in ["AppointmentDelete"] or appointment_data.get("appointmentStatus") == "cancelled":
            Appointment.objects.filter(ghl_id=ghl_id).update(appointment_status="cancelled")
            return Response({"status": "cancelled", "ghl_id": ghl_id})

        if event_type in ["AppointmentCreate", "AppointmentUpdate"]:
            appointment, _ = Appointment.objects.update_or_create(
                ghl_id=ghl_id,
                defaults={
                    "location_id": appointment_data.get("locationId"),
                    "calendar_id": appointment_data.get("calendarId"),
                    "contact_id": appointment_data.get("contactId"),
                    "title": appointment_data.get("title"),
                    "appointment_status": appointment_data.get("appointmentStatus"),
                    "assigned_user_id": appointment_data.get("assignedUserId"),
                    "notes": appointment_data.get("notes"),
                    "start_time": _to_datetime(appointment_data.get("startTime")),
                    "end_time": _to_datetime(appointment_data.get("endTime")),
                }
            )
            return Response({"status": "ok", "ghl_id": ghl_id})

        return Response({"status": "ignored", "event_type": event_type})
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
